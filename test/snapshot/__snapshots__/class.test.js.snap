// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test classes Advanced tests 1`] = `
Program {
  "children": Array [
    Class {
      "body": Array [
        TraitUse {
          "adaptations": null,
          "kind": "traituse",
          "traits": Array [
            Reference {
              "kind": "reference",
              "name": "A",
              "resolution": "uqn",
            },
          ],
        },
        TraitUse {
          "adaptations": Array [
            TraitAlias {
              "as": "bar",
              "kind": "traitalias",
              "method": "foo",
              "trait": null,
              "visibility": "",
            },
          ],
          "kind": "traituse",
          "trailingComments": Array [
            CommentLine {
              "kind": "commentline",
              "value": "// comment
",
            },
            CommentBlock {
              "kind": "commentblock",
              "value": "/* boo */",
            },
            CommentBlock {
              "kind": "commentblock",
              "value": "/** doc
         * data
           foo
         */",
            },
          ],
          "traits": Array [
            Reference {
              "kind": "reference",
              "name": "B",
              "resolution": "uqn",
            },
          ],
        },
        Property {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "property",
          "name": "var",
          "value": Boolean {
            "kind": "boolean",
            "raw": "true",
            "value": true,
          },
          "visibility": null,
        },
        Method {
          "arguments": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": true,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__construct",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "boo",
          },
          "nullable": false,
          "type": null,
          "visibility": "private",
        },
      ],
      "extends": null,
      "implements": Array [
        Reference {
          "kind": "reference",
          "name": "boo",
          "resolution": "uqn",
        },
      ],
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": "foo",
    },
    Interface {
      "body": Array [
        ClassConstant {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "classconstant",
          "leadingComments": Array [
            CommentLine {
              "kind": "commentline",
              "value": "// some doc
",
            },
          ],
          "name": "A",
          "value": Number {
            "kind": "number",
            "value": "1.5",
          },
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "body": null,
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "leadingComments": Array [
            CommentBlock {
              "kind": "commentblock",
              "value": "/** foo */",
            },
          ],
          "name": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "nullable": false,
          "type": null,
          "visibility": "protected",
        },
      ],
      "extends": Array [
        Reference {
          "kind": "reference",
          "name": "something",
          "resolution": "uqn",
        },
      ],
      "kind": "interface",
      "name": "boo",
    },
    Trait {
      "body": Array [
        ClassConstant {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "classconstant",
          "leadingComments": Array [
            CommentLine {
              "kind": "commentline",
              "value": "// some doc
",
            },
          ],
          "name": "A",
          "value": Number {
            "kind": "number",
            "value": "1.5",
          },
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "body": null,
          "byref": false,
          "isAbstract": true,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "nullable": false,
          "type": null,
          "visibility": "protected",
        },
      ],
      "extends": Reference {
        "kind": "reference",
        "name": "foo",
        "resolution": "uqn",
      },
      "implements": Array [
        Reference {
          "kind": "reference",
          "name": "boo",
          "resolution": "uqn",
        },
      ],
      "kind": "trait",
      "name": "line",
    },
  ],
  "comments": Array [
    CommentLine {
      "kind": "commentline",
      "value": "// comment
",
    },
    CommentBlock {
      "kind": "commentblock",
      "value": "/* boo */",
    },
    CommentBlock {
      "kind": "commentblock",
      "value": "/** doc
         * data
           foo
         */",
    },
    CommentLine {
      "kind": "commentline",
      "value": "// some doc
",
    },
    CommentBlock {
      "kind": "commentblock",
      "value": "/** foo */",
    },
    CommentLine {
      "kind": "commentline",
      "value": "// some doc
",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test classes Implement #183 : static keyword as identifier 1`] = `
Program {
  "children": Array [
    Class {
      "body": Array [
        Method {
          "arguments": Array [],
          "body": Block {
            "children": Array [
              Call {
                "arguments": Array [],
                "kind": "call",
                "what": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "foo",
                  },
                  "what": Reference {
                    "kind": "reference",
                    "name": "parent",
                    "resolution": "uqn",
                  },
                },
              },
              Call {
                "arguments": Array [],
                "kind": "call",
                "what": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "bar",
                  },
                  "what": Reference {
                    "kind": "reference",
                    "name": "self",
                    "resolution": "uqn",
                  },
                },
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "baz",
                    },
                    "what": Identifier {
                      "kind": "identifier",
                      "name": "static",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              Call {
                "arguments": Array [],
                "kind": "call",
                "what": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "fooBar",
                  },
                  "what": Reference {
                    "kind": "reference",
                    "name": "A",
                    "resolution": "uqn",
                  },
                },
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "fooBaz",
                    },
                    "what": Variable {
                      "byref": false,
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": "A",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test classes Test js properties 1`] = `
Program {
  "children": Array [
    Class {
      "body": Array [
        Property {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "property",
          "name": "constructor",
          "value": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "constructor",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "constructor",
                    },
                    "what": Variable {
                      "byref": false,
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Identifier {
                    "kind": "identifier",
                    "name": Reference {
                      "kind": "reference",
                      "name": "null",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              Assign {
                "kind": "assign",
                "left": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Variable {
                    "byref": false,
                    "curly": false,
                    "kind": "variable",
                    "name": "constructor",
                  },
                  "what": Reference {
                    "kind": "reference",
                    "name": "self",
                    "resolution": "uqn",
                  },
                },
                "operator": "=",
                "right": Identifier {
                  "kind": "identifier",
                  "name": Reference {
                    "kind": "reference",
                    "name": "null",
                    "resolution": "uqn",
                  },
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__proto__",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": "__proto__",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test classes Test of silent mode 1`] = `
Program {
  "children": Array [
    Class {
      "body": Array [
        TraitUse {
          "adaptations": null,
          "kind": "traituse",
          "traits": Array [
            Reference {
              "kind": "reference",
              "name": "A",
              "resolution": "uqn",
            },
          ],
        },
        TraitUse {
          "adaptations": Array [
            TraitAlias {
              "as": null,
              "kind": "traitalias",
              "method": "foo",
              "trait": null,
              "visibility": "",
            },
            TraitAlias {
              "as": null,
              "kind": "traitalias",
              "method": "",
              "trait": null,
              "visibility": "",
            },
          ],
          "kind": "traituse",
          "traits": Array [
            Reference {
              "kind": "reference",
              "name": "B",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": "foo",
    },
  ],
  "errors": Array [
    Error {
      "expected": ";",
      "kind": "error",
      "line": 4,
      "message": "Parse Error : syntax error, unexpected 'use' (T_USE), expecting ';' on line 4",
      "token": "'use' (T_USE)",
    },
    Error {
      "expected": Array [
        119,
        200,
      ],
      "kind": "error",
      "line": 4,
      "message": "Parse Error : syntax error, unexpected '}' on line 4",
      "token": "'}'",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 4,
      "message": "Parse Error : syntax error, unexpected '}', expecting ';' on line 4",
      "token": "'}'",
    },
    Error {
      "expected": 105,
      "kind": "error",
      "line": 4,
      "message": "Parse Error : syntax error, unexpected ';', expecting T_STRING on line 4",
      "token": "';'",
    },
    Error {
      "expected": Array [
        119,
        200,
      ],
      "kind": "error",
      "line": 4,
      "message": "Parse Error : syntax error, unexpected ';' on line 4",
      "token": "';'",
    },
    Error {
      "expected": "}",
      "kind": "error",
      "line": 5,
      "message": "Parse Error : syntax error, expecting '}' on line 5",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test classes Validate usual declarations 1`] = `
Program {
  "children": Array [
    Class {
      "body": Array [
        ClassConstant {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "classconstant",
          "name": "FOO",
          "value": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"azerty\\"",
            "unicode": false,
            "value": "azerty",
          },
          "visibility": "",
        },
        Property {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "property",
          "name": "var",
          "value": null,
          "visibility": "public",
        },
        Method {
          "arguments": Array [
            Parameter {
              "byref": false,
              "kind": "parameter",
              "name": "data",
              "nullable": false,
              "type": Reference {
                "kind": "reference",
                "name": "\\\\array",
                "resolution": "fqn",
              },
              "value": Identifier {
                "kind": "identifier",
                "name": Reference {
                  "kind": "reference",
                  "name": "null",
                  "resolution": "uqn",
                },
              },
              "variadic": false,
            },
          ],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "data",
                    },
                    "what": Variable {
                      "byref": false,
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "byref": false,
                    "curly": false,
                    "kind": "variable",
                    "name": "data",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__construct",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
        ClassConstant {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "classconstant",
          "name": "list",
          "value": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"bar\\"",
            "unicode": false,
            "value": "bar",
          },
          "visibility": "",
        },
        Method {
          "arguments": Array [
            Parameter {
              "byref": false,
              "kind": "parameter",
              "name": "foo",
              "nullable": false,
              "type": null,
              "value": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "list",
                },
                "what": Reference {
                  "kind": "reference",
                  "name": "self",
                  "resolution": "uqn",
                },
              },
              "variadic": false,
            },
          ],
          "body": Block {
            "children": Array [
              Return {
                "expr": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "list",
                  },
                  "what": Variable {
                    "byref": false,
                    "curly": false,
                    "kind": "variable",
                    "name": "this",
                  },
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "new",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
        Property {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "property",
          "name": "foo",
          "value": null,
          "visibility": "protected",
        },
        Property {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "property",
          "name": "bar",
          "value": null,
          "visibility": "private",
        },
        Method {
          "arguments": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "foobar",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": Reference {
        "kind": "reference",
        "name": "bar",
        "resolution": "uqn",
      },
      "implements": Array [
        Reference {
          "kind": "reference",
          "name": "bim",
          "resolution": "uqn",
        },
        Reference {
          "kind": "reference",
          "name": "bam",
          "resolution": "uqn",
        },
        Reference {
          "kind": "reference",
          "name": "boum",
          "resolution": "uqn",
        },
      ],
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": true,
      "kind": "class",
      "name": "foo",
    },
    Class {
      "body": Array [
        TraitUse {
          "adaptations": Array [
            TraitPrecedence {
              "instead": Array [
                Reference {
                  "kind": "reference",
                  "name": "A",
                  "resolution": "uqn",
                },
              ],
              "kind": "traitprecedence",
              "method": "smallTalk",
              "trait": Reference {
                "kind": "reference",
                "name": "B",
                "resolution": "uqn",
              },
            },
            TraitPrecedence {
              "instead": Array [
                Reference {
                  "kind": "reference",
                  "name": "B",
                  "resolution": "uqn",
                },
                Reference {
                  "kind": "reference",
                  "name": "C",
                  "resolution": "uqn",
                },
              ],
              "kind": "traitprecedence",
              "method": "bigTalk",
              "trait": Reference {
                "kind": "reference",
                "name": "A",
                "resolution": "uqn",
              },
            },
            TraitAlias {
              "as": "talk",
              "kind": "traitalias",
              "method": "bigTalk",
              "trait": Reference {
                "kind": "reference",
                "name": "B",
                "resolution": "uqn",
              },
              "visibility": "public",
            },
            TraitAlias {
              "as": "talk",
              "kind": "traitalias",
              "method": "bigTalk",
              "trait": Reference {
                "kind": "reference",
                "name": "B",
                "resolution": "uqn",
              },
              "visibility": "protected",
            },
            TraitAlias {
              "as": "talk",
              "kind": "traitalias",
              "method": "bigTalk",
              "trait": Reference {
                "kind": "reference",
                "name": "B",
                "resolution": "uqn",
              },
              "visibility": "private",
            },
            TraitAlias {
              "as": "list",
              "kind": "traitalias",
              "method": "new",
              "trait": Reference {
                "kind": "reference",
                "name": "A",
                "resolution": "uqn",
              },
              "visibility": "",
            },
            TraitAlias {
              "as": "new",
              "kind": "traitalias",
              "method": "list",
              "trait": null,
              "visibility": "",
            },
          ],
          "kind": "traituse",
          "traits": Array [
            Reference {
              "kind": "reference",
              "name": "A",
              "resolution": "uqn",
            },
            Reference {
              "kind": "reference",
              "name": "B",
              "resolution": "uqn",
            },
          ],
        },
        Method {
          "arguments": Array [],
          "body": null,
          "byref": true,
          "isAbstract": true,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "nullable": false,
          "type": Reference {
            "kind": "reference",
            "name": "bar",
            "resolution": "uqn",
          },
          "visibility": "protected",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": true,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": "bar",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
