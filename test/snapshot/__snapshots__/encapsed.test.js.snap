// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`encapsed offsetlookup (simple syntax) 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"string $array[0] string\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "string ",
              "unicode": false,
              "value": "string ",
            },
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Number {
                "kind": "number",
                "value": "0",
              },
              "what": Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "array",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " string",
              "unicode": false,
              "value": " string",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`encapsed offsetlookup (simple syntax) 2`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"string $array[koolaid1] string\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "string ",
              "unicode": false,
              "value": "string ",
            },
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "koolaid1",
              },
              "what": Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "array",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " string",
              "unicode": false,
              "value": " string",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`encapsed propertylookup (simple syntax) 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"string $obj->property string\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "string ",
              "unicode": false,
              "value": "string ",
            },
            PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "property",
              },
              "what": Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "obj",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " string",
              "unicode": false,
              "value": " string",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`encapsed two variable (simple syntax) 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"string $var->$var string\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "string ",
              "unicode": false,
              "value": "string ",
            },
            Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "->",
              "unicode": false,
              "value": "->",
            },
            Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " string",
              "unicode": false,
              "value": " string",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`encapsed variable (simple syntax) 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"string \${var} string\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "string ",
              "unicode": false,
              "value": "string ",
            },
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": Identifier {
                "kind": "identifier",
                "name": "var",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " string",
              "unicode": false,
              "value": " string",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`encapsed variable (simple syntax) 2`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"string \${var} string\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "string ",
              "unicode": false,
              "value": "string ",
            },
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": Identifier {
                "kind": "identifier",
                "name": "var",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " string",
              "unicode": false,
              "value": " string",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`encapsed variable curly (simple syntax) 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"string \${var} string\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "string ",
              "unicode": false,
              "value": "string ",
            },
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": "var",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " string",
              "unicode": false,
              "value": " string",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
